// Generated by CoffeeScript 1.3.3
var Robot, baseUrl,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

baseUrl = 'js/rdf/robot2012/';

Robot = (function() {

  Robot.prototype.description = null;

  Robot.prototype.bodies = {};

  Robot.prototype.joints = {};

  Robot.prototype.links = {};

  Robot.prototype.motors = {};

  Robot.prototype.sensors = {};

  Robot.prototype.bodyQueue = [];

  Robot.prototype.loader = null;

  function Robot() {
    this.createJoints = __bind(this.createJoints, this);

    this.loadSensors = __bind(this.loadSensors, this);

    this.addBody = __bind(this.addBody, this);

    this.loadBody = __bind(this.loadBody, this);

    this.rdfLoadingCallback = __bind(this.rdfLoadingCallback, this);

  }

  Robot.prototype.loadRdf = function(rdfUrl, callback) {
    this.callback = callback;
    return $.getJSON(rdfUrl, this.rdfLoadingCallback);
  };

  Robot.prototype.rdfLoadingCallback = function(description) {
    console.log('Loading description \"' + description.name + '\" created on ' + description.timestamp);
    this.description = description;
    this.bodyQueue = this.bodyQueue.concat(description.bodies);
    this.loader = new THREE.JSONLoader();
    console.log('Loading bodies...');
    return this.loadBody();
  };

  Robot.prototype.loadBody = function() {
    var path;
    if (this.bodyQueue.length > 0) {
      path = baseUrl + this.bodyQueue[0]['de.fumanoids.message.BodyExternal.path'];
      return this.loader.load(path, this.addBody);
    } else {
      this.loadSensors();
      console.log('...done.\n Creating joints...');
      scene.updateMatrixWorld();
      this.createJoints();
      console.log('...done.\n Loading description complete.');
      return this.callback();
    }
  };

  Robot.prototype.addBody = function(geometry) {
    var body, matrix, mesh;
    body = this.bodyQueue[0];
    this.bodyQueue.shift();
    this.bodies[body.id] = body;
    mesh = new THREE.Mesh(geometry, new THREE.MeshFaceMaterial());
    body.mesh = mesh;
    matrix = matrixFromProto(body.position);
    mesh.rotation.getRotationFromMatrix(matrix, mesh.scale);
    mesh.position.getPositionFromMatrix(matrix);
    scene.add(mesh);
    return this.loadBody();
  };

  Robot.prototype.loadSensors = function() {
    var sensor, _i, _len, _ref, _results;
    _ref = this.description.sensors;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      sensor = _ref[_i];
      switch (sensor.type) {
        case 'MOTOR':
          _results.push(this.motors[sensor.id] = sensor);
          break;
        default:
          _results.push(this.sensors[sensor.id] = sensor);
      }
    }
    return _results;
  };

  Robot.prototype.createJoints = function() {
    var body, childID, id, joint, link, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3, _ref4, _results;
    _ref = this.description.links;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      link = _ref[_i];
      joint = new Joint(link.id, link.name, vectorFromProto(link.axis), vectorFromProto(link.position), link.bodyIsChild);
      joint.setBody(link.bodyID != null ? this.bodies[link.bodyID].mesh : null);
      if (link.motorID != null) {
        this.motors[link.motorID].joint = joint;
      }
      this.joints[link.id] = joint;
    }
    _ref1 = this.description.links;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      link = _ref1[_j];
      if (link.parallelLinkIDs != null) {
        _ref2 = link.parallelLinkIDs;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          id = _ref2[_k];
          this.joints[link.id].parallelJoints.push(this.joints[id]);
        }
      }
      if (link.parallelOponentLinkID != null) {
        this.joints[link.id].opposingJoints.push(this.joints[link.parallelOponentLinkID]);
      }
    }
    _ref3 = this.bodies;
    for (id in _ref3) {
      body = _ref3[id];
      if (body.parentID != null) {
        this.joints[body.parentID].addBodyChild(body.mesh);
      }
    }
    _ref4 = this.description.links;
    _results = [];
    for (_l = 0, _len3 = _ref4.length; _l < _len3; _l++) {
      link = _ref4[_l];
      if (link.childIDs != null) {
        _results.push((function() {
          var _len4, _m, _ref5, _results1;
          _ref5 = link.childIDs;
          _results1 = [];
          for (_m = 0, _len4 = _ref5.length; _m < _len4; _m++) {
            childID = _ref5[_m];
            _results1.push(this.joints[link.id].addJointChild(this.joints[childID]));
          }
          return _results1;
        }).call(this));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  return Robot;

})();
